/*
 * ODS
 *
 * This is a simple REST API to access Block Chain on Ethereum and handling Smart Contracts and Payment Channel as well.
 *
 * API version: 1.0.0
 * Contact: u.kuehn@tu-berlin.de
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"restapidemo/model"

	"net/http"

	"github.com/rs/zerolog/log"
)

//Disconnect does close the payment channel only and keep users known
func Disconnect(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	alias := readValueFromPath(r, "alias")
	var existChannel model.OpenPaymentChannel
	var result model.Result
	var e model.ModelError

	errIn := json.NewDecoder(r.Body).Decode(&existChannel)
	result.Indata = existChannel
	result.Exception = e

	config, errCfg := setAndCheckAliasConfig(alias)
	_ = config

	if errCfg != nil {
		log.Error().Msg("error read config")
		w.WriteHeader(500)
		result.Success = false
		result.Exception.ShortMessage = "error reading config"
		e, _ := json.Marshal(result)
		w.Write(e)
		return
	}

	if errIn != nil {
		log.Error().Msg("no body available, abort")
		w.WriteHeader(500)
		result.Success = false
		result.Exception.ShortMessage = errIn.Error()
		result.Exception.Error = errIn
		e, _ := json.Marshal(result)
		w.Write(e)
		return
	}

	if sessionExists(alias) {
		sess := sessions[alias]
		sess.Backend.Close(existChannel.Target)
	} else {
		w.WriteHeader(404)
		return
	}

	b, errOut := json.Marshal(result)
	if errOut == nil {
		w.WriteHeader(http.StatusOK)
	} else {
		w.WriteHeader(500)
		log.Error().Msg(errOut.Error())
		return
	}

	//fmt.Println("header set")
	if errOut == nil {
		w.Write(b)
	}

	log.Info().Msg("done")
}
